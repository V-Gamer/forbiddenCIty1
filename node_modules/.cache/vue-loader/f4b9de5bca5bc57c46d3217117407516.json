{"remainingRequest":"c:\\Vue\\forbiddenCity\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!c:\\Vue\\forbiddenCity\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!c:\\Vue\\forbiddenCity\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\Vue\\forbiddenCity\\src\\view\\home\\index.vue?vue&type=template&id=bc2d8efa&scoped=true&","dependencies":[{"path":"c:\\Vue\\forbiddenCity\\src\\view\\home\\index.vue","mtime":1626586023027},{"path":"c:\\Vue\\forbiddenCity\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Vue\\forbiddenCity\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"c:\\Vue\\forbiddenCity\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Vue\\forbiddenCity\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYmlnQm94IiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImhlYWRCb3giIH0sIFsKICAgICAgICAgICAgX3ZtLl9tKDApLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNlYXJjaEJveCIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubWVzc2FnZSwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibWVzc2FnZSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dEJveCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIgfSwKICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ubWVzc2FnZSB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgY2xpY2s6IF92bS5kaXNhcGVhciwKICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF92bS5tZXNzYWdlID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl9tKDEpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX20oMikKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgIF92bS5fbSg0KSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxpbmUiIH0pLAogICAgICAgIF92bS5fbSg1KSwKICAgICAgICBfdm0uX20oNiksCiAgICAgICAgX3ZtLl9tKDcpLAogICAgICAgIF92bS5fbSg4KSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxpbmUiIH0pLAogICAgICAgIF92bS5fbSg5KSwKICAgICAgICBfdm0uX20oMTApCiAgICAgIF0pLAogICAgICBfYygibmF2TGlzdCIsIHsgc3RhdGljQ2xhc3M6ICJuYXZMaXN0IiB9KQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaG9tZSIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9ob21lL2hvbWUxL2hvbWUucG5nIiksIGFsdDogIiIgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAic2VhcmNoQ29udGVudCIsIGF0dHJzOiB7IGlkOiAic2VhcmNoQ29udGVudCIgfSB9LAogICAgICBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9ob21lL2hvbWUxL3NlYXJjaC5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pLAogICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInNlYXJjaFRleHQiIH0sIFtfdm0uX3YoIuaVheWuq+WPo+e6oiIpXSkKICAgICAgXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5vdGljZSIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9ub3RpY2UucG5nIiksCiAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgfQogICAgICB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiYW5uZXIiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9iZy5wbmciKSwgYWx0OiAiIiB9CiAgICAgIH0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZuIiB9LCBbCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2hvbWUvaG9tZTEvZm4xLnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLmlYXlrqvmlrDlk4EiKV0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9ob21lL2hvbWUxL2ZuMi5wbmciKSwKICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJwIiwgW192bS5fdigi5pWF5a6r5Ye654mIIildKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9mbjMucG5nIiksCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuaVheWuq+iBlOWQjSIpXSkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2hvbWUvaG9tZTEvZm40LnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLmlofliJvkuqflk4EiKV0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9yYmlkZGVuU3RvcmUiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb29mIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb29mQm94IiB9LCBbCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJuZXciIH0sIFtfdm0uX3YoIuaWsOS6uuS4k+S6q+mmluWNlTDlhYPotK0iKV0pLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZW5qb3kiIH0sIFtfdm0uX3YoIui/lOi/mDEwMCXnmoTmlK/ku5jph5Hpop0iKV0pLAogICAgICAgICAgX2MoImlucHV0IiwgeyBzdGF0aWNDbGFzczogImdvIiwgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIgfSB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvb2ZXYWxsIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzdG9yZUxpc3QiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic3RvcmVMIiB9LCBbCiAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm5ld1RpdGxlIiB9LCBbX3ZtLl92KCLmlYXlrqvkuIrmlrAiKV0pLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm5ld0dvb2RzIiB9LCBbX3ZtLl92KCLmg4rllpzkuIrnur8iKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdvb2RzIiB9LCBbCiAgICAgICAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogImZpeENsZWFyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImdvb2RzMSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9mbjQucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJpY2UiIH0sIFtfdm0uX3YoIu+/pTE5OS45IildKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImdvb2RzMSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9nb29kczEucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJpY2UiIH0sIFtfdm0uX3YoIu+/pTE5OS45IildKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRlYSIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWFnZTEiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2hvbWUvaG9tZTEvYm90LnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZWFUZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRlYVRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLlpb3kuovnmbvmnp3ojLbmtbciKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY29tbWVudCIgfSwgW192bS5fdigi5aSa56aP5aSa5a+/IildKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJpY2UiIH0sIFtfdm0uX3YoIu+/pTE5OS45IildKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInN0b3JlUiIgfSwgWwogICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJuZXdUaXRsZSIgfSwgW192bS5fdigi5a6r6YeM5aW954mpIildKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJuZXdHb29kcyIgfSwgW192bS5fdigi57K+6YCJIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJnb29kcyIgfSwgWwogICAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJmaXhDbGVhciIgfSwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJnb29kczEiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2hvbWUvaG9tZTEvZm40LnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInByaWNlIiB9LCBbX3ZtLl92KCLvv6UxOTkuOSIpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJnb29kczEiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2hvbWUvaG9tZTEvZ29vZHMxLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInByaWNlIiB9LCBbX3ZtLl92KCLvv6UxOTkuOSIpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJnb29kczEiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2hvbWUvaG9tZTEvZ29vZHMxLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInByaWNlIiB9LCBbX3ZtLl92KCLvv6UxOTkuOSIpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJnb29kczEiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2hvbWUvaG9tZTEvZ29vZHMxLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInByaWNlIiB9LCBbX3ZtLl92KCLvv6UxOTkuOSIpXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJub3RpY2VCb3giIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm90aWNlQm94TCIgfSwgWwogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJub3RpY2VUaXRsZSIgfSwgW192bS5fdigi5pWF5a6r6LWE6K6vIildKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibGluZTIiIH0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJub3RpY2VDb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCLigJzmlYXlrqvorrLloILigJ3nrKzkuIDnmb7lha3ljYHkuozorrIt5Y+k6Zm255O356eR5oqA56CU56m2IikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJub3RpY2VCb3hSIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9ob21lL2hvbWUxL2Fycm93LnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2hvb3NlQm94IiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGluZTMiIH0sIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL2hvbWUvaG9tZTEvbGluZTIucG5nIiksCiAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiYWxsU21hbGwiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJhbGwiIH0sIFtfdm0uX3YoIuS4uiIpXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiYWxsIGJhbGwxIiB9LCBbX3ZtLl92KCLkvaAiKV0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYmFsbCBiYWxsMiIgfSwgW192bS5fdigi57K+IildKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJhbGwgYmFsbDMiIH0sIFtfdm0uX3YoIumAiSIpXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2hvb3NlQmFubmVyIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9ob21lL2hvbWUxL2Nob29zZUJhbm5lci5wbmciKSwKICAgICAgICAgIGFsdDogIiIKICAgICAgICB9CiAgICAgIH0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRyYW5zcGFyZW50IiB9KSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0cmFuc0NvbnRlbnQiIH0sIFsKICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIuaenOWbreiAgeWGnCDDlyDlm73nq4vmlYXlrqsgw5cgSU4gTElHSFQg5paw5Lit5byPIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZmlyZSIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9maXJlLnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibW9yZSIgfSwgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9tb3JlLnBuZyIpLAogICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaG9vc2VHb29kcyIgfSwgWwogICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAiZml4Q2xlYXIiIH0sIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJnb29kc0ltZyIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9nb29kczIucG5nIiksCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJnb29kc1RpdGxlIiB9LCBbX3ZtLl92KCLojbfljIXlj6PnuqLigKLosYfosYbnuqIiKV0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJpY2UiIH0sIFtfdm0uX3YoIu+/pTE5OS4wMCIpXSkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJnb29kc0ltZyIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9nb29kczMucG5nIiksCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJnb29kc1RpdGxlIiB9LCBbX3ZtLl92KCLpuaTnpqfop4noibLigKLmsJTlnqsiKV0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJpY2UiIH0sIFtfdm0uX3YoIu+/pTE5OS4wMCIpXSkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJnb29kc0ltZyIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9nb29kczQucG5nIiksCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJnb29kc1RpdGxlIiB9LCBbX3ZtLl92KCLpuaTnpqfop4noibLigKLmsJTlnqsiKV0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJpY2UiIH0sIFtfdm0uX3YoIu+/pTU0MC4wMCIpXSkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJnb29kc0ltZyIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9nb29kczUucG5nIiksCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJnb29kc1RpdGxlIiB9LCBbX3ZtLl92KCLpuaToiJ7pnZLmnb7kuJ3lt74iKV0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicHJpY2UiIH0sIFtfdm0uX3YoIu+/pTEyMC4wMCIpXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjaG9vc2VCb3giIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaW5lMyIgfSwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9saW5lMi5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJhbGxTbWFsbCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYmFsbCIgfSwgW192bS5fdigi5aW9IildKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJhbGwgYmFsbDEiIH0sIFtfdm0uX3YoIueJqSIpXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiYWxsIGJhbGwyIiB9LCBbX3ZtLl92KCLppoYiKV0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJlY29tbWVuZCIgfSwgWwogICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAiZml4Q2xlYXIiIH0sIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJyZWNvbW1lbmRJbWFnZSIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9yZWNvbW1lbmQxLnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAicmVjb21tZW5kVGl0bGUiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCLojbfljIXlj6PnuqLigKLnkKXnj4DmqZgiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJpbnRyb2R1Y2UiIH0sIFtfdm0uX3YoIuWbvemjjuWlveekvCIpXSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJwcmljZUJveCIgfSwgWwogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJwcmljZSIgfSwgW192bS5fdigi77+lMTk5LjAwIildKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAic2FsZXMiIH0sIFtfdm0uX3YoIuaciOmUgDE5ODciKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInJlY29tbWVuZEltYWdlIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9ob21lL2hvbWUxL3JlY29tbWVuZDIucG5nIiksCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJyZWNvbW1lbmRUaXRsZSIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIuiKseS4neavlOe/vOWPjOmjnua1geiLj+iAs+mlsCIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInByaWNlQm94IiB9LCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInByaWNlIiB9LCBbX3ZtLl92KCLvv6UxMTI3LjAwIildKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAic2FsZXMiIH0sIFtfdm0uX3YoIuaciOmUgDEyNyIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyYW5rTGlzdCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJhbmsiIH0sIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJjcm93biIgfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvaG9tZS9ob21lMS9jcm93bi5wbmciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLmlYXlrqvpppbppbDmjpLooYzmppznrKzkuIAiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJtb3JlIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy9ob21lL2hvbWUxL2Fycm93LnBuZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}